// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	"github.com/nephio-project/porch/pkg/repository"
	mock "github.com/stretchr/testify/mock"
)

// NewMockReferenceResolver creates a new instance of MockReferenceResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReferenceResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReferenceResolver {
	mock := &MockReferenceResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReferenceResolver is an autogenerated mock type for the ReferenceResolver type
type MockReferenceResolver struct {
	mock.Mock
}

type MockReferenceResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReferenceResolver) EXPECT() *MockReferenceResolver_Expecter {
	return &MockReferenceResolver_Expecter{mock: &_m.Mock}
}

// ResolveReference provides a mock function for the type MockReferenceResolver
func (_mock *MockReferenceResolver) ResolveReference(ctx context.Context, namespace string, name string, result repository.Object) error {
	ret := _mock.Called(ctx, namespace, name, result)

	if len(ret) == 0 {
		panic("no return value specified for ResolveReference")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, repository.Object) error); ok {
		r0 = returnFunc(ctx, namespace, name, result)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReferenceResolver_ResolveReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveReference'
type MockReferenceResolver_ResolveReference_Call struct {
	*mock.Call
}

// ResolveReference is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - result repository.Object
func (_e *MockReferenceResolver_Expecter) ResolveReference(ctx interface{}, namespace interface{}, name interface{}, result interface{}) *MockReferenceResolver_ResolveReference_Call {
	return &MockReferenceResolver_ResolveReference_Call{Call: _e.mock.On("ResolveReference", ctx, namespace, name, result)}
}

func (_c *MockReferenceResolver_ResolveReference_Call) Run(run func(ctx context.Context, namespace string, name string, result repository.Object)) *MockReferenceResolver_ResolveReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 repository.Object
		if args[3] != nil {
			arg3 = args[3].(repository.Object)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockReferenceResolver_ResolveReference_Call) Return(err error) *MockReferenceResolver_ResolveReference_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReferenceResolver_ResolveReference_Call) RunAndReturn(run func(ctx context.Context, namespace string, name string, result repository.Object) error) *MockReferenceResolver_ResolveReference_Call {
	_c.Call.Return(run)
	return _c
}
