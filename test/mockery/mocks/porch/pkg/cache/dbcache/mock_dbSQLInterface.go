// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dbcache

import (
	"database/sql"

	mock "github.com/stretchr/testify/mock"
)

// newMockdbSQLInterface creates a new instance of mockdbSQLInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockdbSQLInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockdbSQLInterface {
	mock := &mockdbSQLInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockdbSQLInterface is an autogenerated mock type for the dbSQLInterface type
type mockdbSQLInterface struct {
	mock.Mock
}

type mockdbSQLInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *mockdbSQLInterface) EXPECT() *mockdbSQLInterface_Expecter {
	return &mockdbSQLInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type mockdbSQLInterface
func (_mock *mockdbSQLInterface) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockdbSQLInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockdbSQLInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *mockdbSQLInterface_Expecter) Close() *mockdbSQLInterface_Close_Call {
	return &mockdbSQLInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *mockdbSQLInterface_Close_Call) Run(run func()) *mockdbSQLInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockdbSQLInterface_Close_Call) Return(err error) *mockdbSQLInterface_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockdbSQLInterface_Close_Call) RunAndReturn(run func() error) *mockdbSQLInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type mockdbSQLInterface
func (_mock *mockdbSQLInterface) Exec(query string, args ...any) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...any) (sql.Result, error)); ok {
		return returnFunc(query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...any) sql.Result); ok {
		r0 = returnFunc(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...any) error); ok {
		r1 = returnFunc(query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockdbSQLInterface_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type mockdbSQLInterface_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...any
func (_e *mockdbSQLInterface_Expecter) Exec(query interface{}, args ...interface{}) *mockdbSQLInterface_Exec_Call {
	return &mockdbSQLInterface_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *mockdbSQLInterface_Exec_Call) Run(run func(query string, args ...any)) *mockdbSQLInterface_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockdbSQLInterface_Exec_Call) Return(result sql.Result, err error) *mockdbSQLInterface_Exec_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *mockdbSQLInterface_Exec_Call) RunAndReturn(run func(query string, args ...any) (sql.Result, error)) *mockdbSQLInterface_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type mockdbSQLInterface
func (_mock *mockdbSQLInterface) Query(s string, vs ...any) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, vs...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...any) (*sql.Rows, error)); ok {
		return returnFunc(s, vs...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...any) *sql.Rows); ok {
		r0 = returnFunc(s, vs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...any) error); ok {
		r1 = returnFunc(s, vs...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockdbSQLInterface_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type mockdbSQLInterface_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - s string
//   - vs ...any
func (_e *mockdbSQLInterface_Expecter) Query(s interface{}, vs ...interface{}) *mockdbSQLInterface_Query_Call {
	return &mockdbSQLInterface_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{s}, vs...)...)}
}

func (_c *mockdbSQLInterface_Query_Call) Run(run func(s string, vs ...any)) *mockdbSQLInterface_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockdbSQLInterface_Query_Call) Return(rows *sql.Rows, err error) *mockdbSQLInterface_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *mockdbSQLInterface_Query_Call) RunAndReturn(run func(s string, vs ...any) (*sql.Rows, error)) *mockdbSQLInterface_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type mockdbSQLInterface
func (_mock *mockdbSQLInterface) QueryRow(s string, vs ...any) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, vs...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *sql.Row
	if returnFunc, ok := ret.Get(0).(func(string, ...any) *sql.Row); ok {
		r0 = returnFunc(s, vs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}
	return r0
}

// mockdbSQLInterface_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type mockdbSQLInterface_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - s string
//   - vs ...any
func (_e *mockdbSQLInterface_Expecter) QueryRow(s interface{}, vs ...interface{}) *mockdbSQLInterface_QueryRow_Call {
	return &mockdbSQLInterface_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{s}, vs...)...)}
}

func (_c *mockdbSQLInterface_QueryRow_Call) Run(run func(s string, vs ...any)) *mockdbSQLInterface_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockdbSQLInterface_QueryRow_Call) Return(row *sql.Row) *mockdbSQLInterface_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *mockdbSQLInterface_QueryRow_Call) RunAndReturn(run func(s string, vs ...any) *sql.Row) *mockdbSQLInterface_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}
