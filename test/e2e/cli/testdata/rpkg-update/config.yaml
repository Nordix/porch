commands:
  - args:
      - porchctl
      - repo
      - register
      - --namespace=rpkg-update
      - --name=git
      - http://git-server.test-git-namespace.svc.cluster.local:8080/rpkg-update
  - args:
      - porchctl
      - rpkg
      - clone
      - --namespace=rpkg-update
      - https://github.com/platkrm/test-blueprints.git
      - --directory=basens
      - --ref=basens/v1
      - --repository=git
      - --workspace=update-1
      - basens-edit
    stdout: "git.basens-edit.update-1 created\n"
  - args:
      - porchctl
      - rpkg
      - clone
      - --namespace=rpkg-update
      - git.basens-edit.update-1
      - --directory=basens
      - --ref=basens/v1
      - --repository=git
      - --workspace=update-2
      - basens-edit-clone
    stdout: "git.basens-edit-clone.update-2 created\n"
  - args:
      - porchctl
      - rpkg
      - copy
      - --namespace=rpkg-update
      - --workspace=update-3
      - --replay-strategy=true
      - git.basens-edit.update-1
    stdout: "git.basens-edit.update-3 created\n"
  - args:
      - porchctl
      - rpkg
      - propose
      - --namespace=rpkg-update
      - git.basens-edit.update-3
    stdout: "git.basens-edit.update-3 proposed\n"
  - args:
      - porchctl
      - rpkg
      - approve
      - --namespace=rpkg-update
      - git.basens-edit.update-3
    stdout: "git.basens-edit.update-3 approved\n"
  - args:
      - porchctl
      - rpkg
      - get
      - --namespace=rpkg-update
    stdout: |
      NAME                             PACKAGE             WORKSPACENAME   REVISION   LATEST   LIFECYCLE   REPOSITORY
      git.basens-edit.main             basens-edit         main            -1         false    Published   git
      git.basens-edit.update-1         basens-edit         update-1        0          false    Draft       git
      git.basens-edit.update-3         basens-edit         update-3        1          true     Published   git
      git.basens-edit-clone.update-2   basens-edit-clone   update-2        0          false    Draft       git
  - args:
      - porchctl
      - rpkg
      - update
      - --namespace=rpkg-update
      - --discover=upstream
      - git.basens-edit-clone.update-2
    stdout: |
      PACKAGE REVISION                 UPSTREAM REPOSITORY   UPSTREAM UPDATES
      git.basens-edit-clone.update-2   git                   1
  - args:
      - porchctl
      - rpkg
      - update
      - --namespace=rpkg-update
      - --discover=upstream
    stdout: |
      PACKAGE REVISION                 UPSTREAM REPOSITORY   UPSTREAM UPDATES
      git.basens-edit.main                                   No update available
      git.basens-edit.update-1                               No update available
      git.basens-edit.update-3                               No update available
      git.basens-edit-clone.update-2   git                   1
  - args:
      - porchctl
      - rpkg
      - update
      - --namespace=rpkg-update
      - --discover=downstream
    stdout: |
      PACKAGE REVISION           DOWNSTREAM PACKAGE               DOWNSTREAM UPDATE
      git.basens-edit.update-3   git.basens-edit-clone.update-2   (draft "update-1")->1
  - args:
      - porchctl
      - rpkg
      - update
      - --namespace=rpkg-update
      - --revision=1
      - git.basens-edit-clone.update-2
    stdout: "git.basens-edit-clone.update-2 updated\n"
  - args:
      - porchctl
      - rpkg
      - update
      - --namespace=rpkg-update
      - --discover=upstream
    stdout: |
      PACKAGE REVISION                 UPSTREAM REPOSITORY   UPSTREAM UPDATES
      git.basens-edit.main                                   No update available
      git.basens-edit.update-1                               No update available
      git.basens-edit.update-3                               No update available
      git.basens-edit-clone.update-2   git                   No update available
  - args:
      - porchctl
      - rpkg
      - pull
      - --namespace=rpkg-update
      - git.basens-edit-clone.update-2
      - /tmp/porch-e2e/pkg-update-git.basens-edit-clone.update-2
  - args:
      - kpt
      - fn
      - eval
      - --image
      - gcr.io/kpt-fn/search-replace:v0.2.0
      - --match-kind
      - Kptfile
      - /tmp/porch-e2e/pkg-update-git.basens-edit-clone.update-2
      - --
      - by-path=upstreamLock.git.ref
      - put-value=invalid
    stderr: "[RUNNING] \"gcr.io/kpt-fn/search-replace:v0.2.0\" on 1 resource(s)\n  Results:\n    [info] upstreamLock.git.ref: Mutated field value to \"invalid\"\n"
  - args:
      - porchctl
      - rpkg
      - push
      - --namespace=rpkg-update
      - git.basens-edit-clone.update-2
      - /tmp/porch-e2e/pkg-update-git.basens-edit-clone.update-2
    stdout: "git.basens-edit-clone.update-2 pushed\n"
  - args:
      - porchctl
      - rpkg
      - update
      - --namespace=rpkg-update
      - --discover=upstream
    stderr: "Error: could not parse upstreamLock in Kptfile of package \"git.basens-edit-clone.update-2\": malformed upstreamLock.Git.Ref \"invalid\" \n"
    exitCode: 1
##COPY-MERGE UPDATE
  # Step 1: Create Blueprint v1
  - args:
      - porchctl
      - rpkg
      - init
      - blueprint
      - --namespace=rpkg-update
      - --repository=git
      - --workspace=v1
    stdout: "git.blueprint.v1 created\n"
  - args:
      - porchctl
      - rpkg
      - pull
      - git.blueprint.v1
      - --namespace=rpkg-update
      - /tmp/porch-e2e/local-pack-blueprint
  - args:
      - sh
      - -c
      - |
        echo "ORIGINAL" > /tmp/porch-e2e/local-pack-blueprint/README.md && \
        kubectl create deployment test-dep --image=busybox --dry-run=client -o yaml > /tmp/porch-e2e/local-pack-blueprint/a.yaml && \
        kubectl create configmap test-dep --dry-run=client -o yaml > /tmp/porch-e2e/local-pack-blueprint/b.yaml
  - args:
      - porchctl
      - rpkg
      - push
      - git.blueprint.v1
      - --namespace=rpkg-update
      - /tmp/porch-e2e/local-pack-blueprint
    stdout: "git.blueprint.v1 pushed\n"
  # Step 2: Approve Blueprint v1
  - args:
      - porchctl
      - rpkg
      - propose
      - git.blueprint.v1
      - --namespace=rpkg-update
    stdout: "git.blueprint.v1 proposed\n"
  - args:
      - porchctl
      - rpkg
      - approve
      - git.blueprint.v1
      - --namespace=rpkg-update
    stdout: "git.blueprint.v1 approved\n"

  # Step 3: Copy Blueprint v1 to v2 and update
  - args:
      - porchctl
      - rpkg
      - copy
      - git.blueprint.v1
      - --namespace=rpkg-update
      - --workspace=v2
    stdout: "git.blueprint.v2 created\n"
  - args:
      - porchctl
      - rpkg
      - pull
      - git.blueprint.v2
      - --namespace=rpkg-update
      - /tmp/porch-e2e/local-pack-blueprint2
  - args:
      - sh
      - -c
      - |
        sed -i 's/replicas: 1/replicas: 2/' /tmp/porch-e2e/local-pack-blueprint2/a.yaml && \
        kubectl create deployment my-dep --image=nginx --dry-run=client -o yaml > /tmp/porch-e2e/local-pack-blueprint2/c.yaml
  - args:
      - porchctl
      - rpkg
      - push
      - git.blueprint.v2
      - --namespace=rpkg-update
      - /tmp/porch-e2e/local-pack-blueprint2
    stdout: "git.blueprint.v2 pushed\n"
  # Step 4: Approve Blueprint v2
  - args:
      - porchctl
      - rpkg
      - propose
      - git.blueprint.v2
      - --namespace=rpkg-update
    stdout: "git.blueprint.v2 proposed\n"
  - args:
      - porchctl
      - rpkg
      - approve
      - git.blueprint.v2
      - --namespace=rpkg-update
    stdout: "git.blueprint.v2 approved\n"

  # Step 5: Clone Blueprint v1 to Deployment v1 with copy-merge strategy
  - args:
      - porchctl
      - rpkg
      - clone
      - git.blueprint.v1
      - --namespace=rpkg-update
      - --repository=git
      - --workspace=v0
      - --strategy=copy-merge
      - deployment
    stdout: "git.deployment.v0 created\n"
  - args:
      - porchctl
      - rpkg
      - copy
      - git.deployment.v0
      - --namespace=rpkg-update
      - --workspace=v1
      - --replay-strategy
    stdout: "git.deployment.v1 created\n"
  - args:
      - porchctl
      - rpkg
      - pull
      - git.deployment.v1
      - --namespace=rpkg-update
      - /tmp/porch-e2e/local-pack-deployment
  - args:
      - sh
      - -c
      - |
        kubectl create service clusterip CIQ --tcp=80:80 --dry-run=client -o yaml > /tmp/porch-e2e/local-pack-deployment/cIQ.yaml && \
        kubectl create secret generic test-val --dry-run=client -o yaml > /tmp/porch-e2e/local-pack-deployment/day0value.yaml && \
        echo "LOCAL" > /tmp/porch-e2e/local-pack-deployment/README.md && \
        sed -i 's/replicas: 1/replicas: 3/' /tmp/porch-e2e/local-pack-deployment/a.yaml
  - args:
      - porchctl
      - rpkg
      - push
      - git.deployment.v1
      - --namespace=rpkg-update
      - /tmp/porch-e2e/local-pack-deployment
    stdout: "git.deployment.v1 pushed\n"
  # Step 6: Update Deployment v1 with Blueprint v2
  - args:
      - porchctl
      - rpkg
      - update
      - git.deployment.v1
      - --namespace=rpkg-update
      - --revision=2
    stdout: "git.deployment.v1 updated\n"
  # Step 7: Check the updated value
  - args:
      - porchctl
      - rpkg
      - pull
      - --namespace=rpkg-update
      - git.deployment.v1
      - /tmp/porch-e2e/local-pack-result
  - args:
      - sh
      - -c
      - |
        cat /tmp/porch-e2e/local-pack-result/a.yaml | grep "replicas: 2"
    stdout: "  replicas: 2\n"
  - args:
      - sh
      - -c
      - |
        ls /tmp/porch-e2e/local-pack-result
    stdout: "Kptfile\nREADME.md\na.yaml\nb.yaml\nc.yaml\ncIQ.yaml\nday0value.yaml\npackage-context.yaml\n"
##FORCE-DELETE-REPLACE UPDATE
  # Step 8: Copy Blueprint v1 to v2 and update
  - args:
      - porchctl
      - rpkg
      - copy
      - git.blueprint.v2
      - --namespace=rpkg-update
      - --workspace=v3
    stdout: "git.blueprint.v3 created\n"
  - args:
      - porchctl
      - rpkg
      - pull
      - --namespace=rpkg-update
      - git.blueprint.v3
      - /tmp/porch-e2e/delete-replace-pack
  - args:
      - sh
      - -c
      - |
        sed -i 's/replicas: 2/replicas: 5/' /tmp/porch-e2e/delete-replace-pack/a.yaml && rm /tmp/porch-e2e/delete-replace-pack/b.yaml
  - args:
      - porchctl
      - rpkg
      - push
      - git.blueprint.v3
      - --namespace=rpkg-update
      - /tmp/porch-e2e/delete-replace-pack
    stdout: "git.blueprint.v3 pushed\n"
  # Step 9: Approve Blueprint v3
  - args:
      - porchctl
      - rpkg
      - propose
      - git.blueprint.v3
      - --namespace=rpkg-update
    stdout: "git.blueprint.v3 proposed\n"
  - args:
      - porchctl
      - rpkg
      - approve
      - git.blueprint.v3
      - --namespace=rpkg-update
    stdout: "git.blueprint.v3 approved\n"
  # Step 10: Clone Blueprint v3 to DeleteReplace v1 with force-delete-replace strategy
  - args:
      - porchctl
      - rpkg
      - clone
      - git.blueprint.v3
      - --namespace=rpkg-update
      - --repository=git
      - --workspace=v1
      - --strategy=force-delete-replace
      - deletereplace
    stdout: "git.deletereplace.v1 created\n"
  - args:
      - porchctl
      - rpkg
      - pull
      - git.deletereplace.v1
      - --namespace=rpkg-update
      - /tmp/porch-e2e/local-pack-deletereplace
  - args:
      - sh
      - -c
      - |
        sed -i 's/replicas: 1/replicas: 11/' /tmp/porch-e2e/local-pack-deletereplace/a.yaml
  - args:
      - porchctl
      - rpkg
      - push
      - git.deletereplace.v1
      - --namespace=rpkg-update
      - /tmp/porch-e2e/local-pack-deletereplace
    stdout: "git.deletereplace.v1 pushed\n"
  # Step 11: Update deletereplace v1 with Blueprint v3
  - args:
      - porchctl
      - rpkg
      - update
      - git.deletereplace.v1
      - --namespace=rpkg-update
      - --revision=3
    stdout: "git.deletereplace.v1 updated\n"
  # Step 12: Check the updated values
  - args:
      - porchctl
      - rpkg
      - pull
      - --namespace=rpkg-update
      - git.deletereplace.v1
      - /tmp/porch-e2e/local-pack-deletereplace-result
  - args:
      - sh
      - -c
      - |
        cat /tmp/porch-e2e/local-pack-deletereplace-result/a.yaml | grep "replicas: 5"
    stdout: "  replicas: 5\n"
  - args:
      - sh
      - -c
      - |
        ls /tmp/porch-e2e/local-pack-deletereplace-result
    stdout: "Kptfile\nREADME.md\na.yaml\nc.yaml\npackage-context.yaml\n"
